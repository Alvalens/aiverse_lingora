// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
enum Role {
  USER
  ADMIN
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum language {
  EN
  ID
}

enum TokenPurpose {
  FORGOT
  VERIFICATION
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  employment    String?
  about         String?
  role          Role      @default(USER)
  password      String?
  emailVerified DateTime?
  image         String?
  language      language  @default(ID)
  agreement     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts               Account[]
  sessions               Session[]
  tokens                 TokenBalance[]
  education              Education[]
  experience             Experience[]
  skills                 Skill[]
  tracking               UserTracking[]
  transactions           Transaction[]
  dailyTalkSession       dailyTalkSession[]
  storytellingSession    storyTellingSession[]
  debateSession          debateSession[]
  referralUsagesReceived ReferralUser[]        @relation("ReferredUser")
  referralCode           ReferralCode?

  forgotVerificationTokens ForgotVerificationToken[]
}

model Education {
  id              Int       @id @default(autoincrement())
  userId          String
  degree          String
  institutionName String
  startDate       DateTime
  endDate         DateTime?
  presentDate     String?

  user User @relation(fields: [userId], references: [id])
}

model Experience {
  id               Int       @id @default(autoincrement())
  userId           String
  companyName      String
  role             String
  skills           String
  startDate        DateTime
  endDate          DateTime?
  presentDate      String?
  responsibilities String
  user             User      @relation(fields: [userId], references: [id])
}

// skill here
model Skill {
  id        Int    @id @default(autoincrement())
  userId    String
  skillName String

  user User @relation(fields: [userId], references: [id])
}

model TokenBalance {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TokenPack {
  id          Int      @id @default(autoincrement())
  name        String
  tokens      Int
  price       Int
  dummyPrice  Int?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[]
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          String
  tokenPackId     Int
  midtransOrderId String
  amount          Int
  status          TransactionStatus
  paymentUrl      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  tokenPack TokenPack @relation(fields: [tokenPackId], references: [id])
}

model UserTracking {
  id        Int      @id @default(autoincrement())
  userId    String
  source    String // e.g., "website", "instagram", "youtube", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ReferralCode {
  id                String         @id @default(cuid())
  userId            String         @unique
  code              String         @unique
  link              String         @unique
  tokenFromReferral Int            @default(0)
  claimedMilestone  Int            @default(0)
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralUsages    ReferralUser[]
}

model ReferralUser {
  id               String @id @default(cuid())
  referralCodeId   String
  referredUserId   String
  referredUserName String

  referralCode ReferralCode @relation(fields: [referralCodeId], references: [id], onDelete: Cascade)
  referredUser User         @relation("ReferredUser", fields: [referredUserId], references: [id], onDelete: Cascade)

  @@unique([referralCodeId, referredUserId])
}

model ForgotVerificationToken {
  id        String       @id @default(cuid())
  userId    String
  token     String
  expiry    DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  purpose   TokenPurpose

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, purpose])
}

model dailyTalkSession {
  id          String    @id @default(cuid())
  userId      String
  theme       String
  description String    @db.Text
  suggestions String?   @db.Text
  duration    Int       @default(5)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  score       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  questions dailyTalkQuestion[]
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model dailyTalkQuestion {
  id          String   @id @default(cuid())
  dailyTalkId String
  question    String   @db.Text
  answer      String?  @db.Text
  suggestion  String?  @db.Text
  reason      String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dailyTalk dailyTalkSession @relation(fields: [dailyTalkId], references: [id], onDelete: Cascade)
}

model storyTellingSession {
  id          String   @id @default(cuid())
  userId      String
  image       String
  userAnswer  String?  @db.Text
  suggestions Json?
  score       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model debateSession {
  id          String    @id @default(cuid())
  userId      String
  theme       String
  description String    @db.Text
  suggestions String?   @db.Text
  duration    Int       @default(5)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  score       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  questions debateQuestion[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model debateQuestion {
  id         String   @id @default(cuid())
  debateId   String
  question   String   @db.Text
  answer     String?  @db.Text
  suggestion String?  @db.Text
  reason     String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  debate debateSession @relation(fields: [debateId], references: [id], onDelete: Cascade)
}
